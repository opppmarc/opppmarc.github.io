<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿虞在路上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://opppmarc.github.io/"/>
  <updated>2020-11-26T00:41:02.473Z</updated>
  <id>https://opppmarc.github.io/</id>
  
  <author>
    <name>Marc Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSharp6新特性</title>
    <link href="https://opppmarc.github.io/2020/11/26/CSharp6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://opppmarc.github.io/2020/11/26/CSharp6%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-11-26T00:39:43.000Z</published>
    <updated>2020-11-26T00:41:02.473Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有关C-6新特性的简单总结&quot;&gt;&lt;a href=&quot;#有关C-6新特性的简单总结&quot; class=&quot;headerlink&quot; title=&quot;有关C#6新特性的简单总结&quot;&gt;&lt;/a&gt;有关C#6新特性的简单总结&lt;/h2&gt;&lt;p&gt;转载自Zoe_yan &lt;a href=&quot;https://www.cnblogs.com/zoe-yan/p/10276270.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《C# 6新特性简单总结》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近在看《C#高级编程 C# 6&amp;amp;.NET Core 1.0》，会做一些读书笔记，也算对知识的总结与沉淀了。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="转载" scheme="https://opppmarc.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>C#中关键字ref与out的区别</title>
    <link href="https://opppmarc.github.io/2020/10/14/C-%E4%B8%AD%E5%85%B3%E9%94%AE%E5%AD%97ref%E4%B8%8Eout%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://opppmarc.github.io/2020/10/14/C-%E4%B8%AD%E5%85%B3%E9%94%AE%E5%AD%97ref%E4%B8%8Eout%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-10-14T12:20:11.000Z</published>
    <updated>2020-10-14T13:28:41.948Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-中关键字ref与out的区别&quot;&gt;&lt;a href=&quot;#C-中关键字ref与out的区别&quot; class=&quot;headerlink&quot; title=&quot;C#中关键字ref与out的区别&quot;&gt;&lt;/a&gt;C#中关键字ref与out的区别&lt;/h2&gt;&lt;p&gt;C#中通过ref与Out关键字可以使参数按照引用来传递，通过引用（ref）和输出（out）向方法传递参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>爬坑-显示器标识号与屏幕区域不匹配的问题</title>
    <link href="https://opppmarc.github.io/2020/10/10/%E7%88%AC%E5%9D%91-%E6%98%BE%E7%A4%BA%E5%99%A8%E6%A0%87%E8%AF%86%E5%8F%B7%E4%B8%8E%E5%B1%8F%E5%B9%95%E5%8C%BA%E5%9F%9F%E4%B8%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://opppmarc.github.io/2020/10/10/%E7%88%AC%E5%9D%91-%E6%98%BE%E7%A4%BA%E5%99%A8%E6%A0%87%E8%AF%86%E5%8F%B7%E4%B8%8E%E5%B1%8F%E5%B9%95%E5%8C%BA%E5%9F%9F%E4%B8%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-10T12:11:48.000Z</published>
    <updated>2020-10-14T13:29:23.602Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;爬坑：关于显示器标识号与屏幕区域不匹配的问题&quot;&gt;&lt;a href=&quot;#爬坑：关于显示器标识号与屏幕区域不匹配的问题&quot; class=&quot;headerlink&quot; title=&quot;爬坑：关于显示器标识号与屏幕区域不匹配的问题&quot;&gt;&lt;/a&gt;爬坑：关于显示器标识号与屏幕区域不匹配的问题&lt;/h2&gt;&lt;p&gt;最近有个项目需求，要求在计算机有多个显示屏幕的环境下，把指定的应用程序显示在指定的显示器上。&lt;/p&gt;
&lt;p&gt;起初的要求是把应用程序弹到“最后一块”屏幕上即可，比如横向排列的3块显示器，屏幕标识号（桌面右键-显示设置）依次为1\2\3，那目标屏幕就是3号屏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
      <category term="计算机硬件" scheme="https://opppmarc.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>爬坑-FamilyRacing的那些事</title>
    <link href="https://opppmarc.github.io/2020/10/06/%E7%88%AC%E5%9D%91-FamilyRacing%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://opppmarc.github.io/2020/10/06/%E7%88%AC%E5%9D%91-FamilyRacing%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2020-10-06T13:05:47.000Z</published>
    <updated>2020-10-06T13:14:16.162Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;爬坑：FamilyRacing的那些事&quot;&gt;&lt;a href=&quot;#爬坑：FamilyRacing的那些事&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="VS" scheme="https://opppmarc.github.io/tags/VS/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>WPF的xaml代码中显示“命名空间不存在对应名称”的错误</title>
    <link href="https://opppmarc.github.io/2020/10/06/%E7%88%AC%E5%9D%91-WPF%E7%9A%84xaml%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%98%BE%E7%A4%BA%E2%80%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%AF%B9%E5%BA%94%E5%90%8D%E7%A7%B0%E2%80%9D%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://opppmarc.github.io/2020/10/06/%E7%88%AC%E5%9D%91-WPF%E7%9A%84xaml%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%98%BE%E7%A4%BA%E2%80%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%AF%B9%E5%BA%94%E5%90%8D%E7%A7%B0%E2%80%9D%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2020-10-06T12:48:29.000Z</published>
    <updated>2020-10-06T13:04:07.177Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;爬坑：关于WPF程序的xaml代码处显示“命名空间不存在对应名称”的问题&quot;&gt;&lt;a href=&quot;#爬坑：关于WPF程序的xaml代码处显示“命名空间不存在对应名称”的问题&quot; class=&quot;headerlink&quot; title=&quot;爬坑：关于WPF程序的xaml代码处显示“命名空间不存在对应名称”的问题&quot;&gt;&lt;/a&gt;爬坑：关于WPF程序的xaml代码处显示“命名空间不存在对应名称”的问题&lt;/h2&gt;&lt;p&gt;背景：在创建一个新的WPF项目时, app.xaml中的DataContext指向了一个IOC初始化类，但是“IOCInit.cs”在项目中已经存在，编译器却提示：命名空间不存在对应名称。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="VS" scheme="https://opppmarc.github.io/tags/VS/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
      <category term="WPF" scheme="https://opppmarc.github.io/tags/WPF/"/>
    
      <category term="XAML" scheme="https://opppmarc.github.io/tags/XAML/"/>
    
  </entry>
  
  <entry>
    <title>爬坑-关于“未能加载文件或程序集”的解决方法</title>
    <link href="https://opppmarc.github.io/2020/09/28/%E7%88%AC%E5%9D%91-%E5%85%B3%E4%BA%8E%E2%80%9C%E6%9C%AA%E8%83%BD%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E6%88%96%E7%A8%8B%E5%BA%8F%E9%9B%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%B3%95/"/>
    <id>https://opppmarc.github.io/2020/09/28/%E7%88%AC%E5%9D%91-%E5%85%B3%E4%BA%8E%E2%80%9C%E6%9C%AA%E8%83%BD%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E6%88%96%E7%A8%8B%E5%BA%8F%E9%9B%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%B3%95/</id>
    <published>2020-09-28T05:22:54.000Z</published>
    <updated>2020-09-29T02:41:54.367Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;爬坑：关于“未能加载文件或程序集”的解决方法&quot;&gt;&lt;a href=&quot;#爬坑：关于“未能加载文件或程序集”的解决方法&quot; class=&quot;headerlink&quot; title=&quot;爬坑：关于“未能加载文件或程序集”的解决方法&quot;&gt;&lt;/a&gt;爬坑：关于“未能加载文件或程序集”的解决方法&lt;/h2&gt;&lt;p&gt;调试项目时重写了2个类，上一个版本可以正常运行，但是重写后一跑立马报了一个异常“EntryAssembly: D:\VR\Egg_Unmannad.exe UnhandledException: Ioc instance init erro!!”&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="VS" scheme="https://opppmarc.github.io/tags/VS/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Socket/TcpListener/UdpClient</title>
    <link href="https://opppmarc.github.io/2020/06/26/Socket-TcpListener-UdpClient/"/>
    <id>https://opppmarc.github.io/2020/06/26/Socket-TcpListener-UdpClient/</id>
    <published>2020-06-26T14:26:58.000Z</published>
    <updated>2020-09-29T02:41:21.740Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Socket/TcpListener/UdpClient同属于命名空间&lt;code&gt;System.Net.Sockets&lt;/code&gt;，&lt;code&gt;System.Net.Sockets&lt;/code&gt;命名空间为需要严密控制网络访问的开发人员提供了 Windows Sockets (Winsock) 接口的托管实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="Socket" scheme="https://opppmarc.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>线程调用带参数方法</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-21T14:57:59.000Z</published>
    <updated>2020-06-22T00:13:50.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通过Thread发起线程时怎么调用带参数的方法&quot;&gt;&lt;a href=&quot;#通过Thread发起线程时怎么调用带参数的方法&quot; class=&quot;headerlink&quot; title=&quot;通过Thread发起线程时怎么调用带参数的方法&quot;&gt;&lt;/a&gt;通过Thread发起线程时怎么调用带参数的方法&lt;/h2&gt;&lt;p&gt;在.NET Framework中可以通过2种方法实现线程调用带参数的方法:Thread.Start(object),封装线程的方法和参数&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>线程PlatformNotSupportedException异常</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8BPlatformNotSupportedException%E5%BC%82%E5%B8%B8/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8BPlatformNotSupportedException%E5%BC%82%E5%B8%B8/</id>
    <published>2020-06-21T14:52:54.000Z</published>
    <updated>2020-06-22T00:12:30.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;System-PlatformNotSupportedException-”Operation-is-not-supported-on-this-platform”&quot;&gt;&lt;a href=&quot;#System-PlatformNotSupportedException-”Operation-is-not-supported-on-this-platform”&quot; class=&quot;headerlink&quot; title=&quot;System.PlatformNotSupportedException:”Operation is not supported on this platform”&quot;&gt;&lt;/a&gt;System.PlatformNotSupportedException:”Operation is not supported on this platform”&lt;/h2&gt;&lt;p&gt;详细信息：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.PlatformNotSupportedException
HResult=0x80131539
Message=Operation is not supported on this platform.
Source=System.Private.CoreLib
StackTrace:
at System.Func`3.BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, Object object)
at _010_线程.Program.Main(String[] args) in D:\VSProject\CSharpStudy\Level3\CSStudy3\010-线程\Program.cs:line 13&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/categories/C/Bug/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>语言继承查询(LINQ)</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E8%AF%AD%E8%A8%80%E7%BB%A7%E6%89%BF%E6%9F%A5%E8%AF%A2-LINQ/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E8%AF%AD%E8%A8%80%E7%BB%A7%E6%89%BF%E6%9F%A5%E8%AF%A2-LINQ/</id>
    <published>2020-06-21T14:49:24.000Z</published>
    <updated>2020-06-22T00:18:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语言继承查询-LINQ&quot;&gt;&lt;a href=&quot;#语言继承查询-LINQ&quot; class=&quot;headerlink&quot; title=&quot;语言继承查询 (LINQ)&quot;&gt;&lt;/a&gt;语言继承查询 (LINQ)&lt;/h2&gt;&lt;p&gt;语言集成查询 (LINQ) 是一系列直接将查询功能集成到 C# 语言的技术统称，是.&lt;code&gt;NET Frameorek 3.5&lt;/code&gt; 的新增特性。&lt;br&gt;借助LINQ，可以使用语言关键字和熟悉的运算符针对强类型化对象集合编写查询，通俗一点说就是是指将查询功能和语言结合起来，从而为我们提供一种统一的方式，让我们能在C#或VB.NET语言中直接查询和操作各种数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>栈(Stack)</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E6%A0%88-Stack/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E6%A0%88-Stack/</id>
    <published>2020-06-21T14:44:58.000Z</published>
    <updated>2020-06-22T00:21:16.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈（Stack）&quot;&gt;&lt;a href=&quot;#栈（Stack）&quot; class=&quot;headerlink&quot; title=&quot;栈（Stack）&quot;&gt;&lt;/a&gt;栈（Stack）&lt;/h2&gt;&lt;p&gt;栈(stack)又叫堆栈，是一种只能在表的一端进行插入和删除操作的线性表。允许进行插入、删除操作的这一端称为栈顶（Top），另一个固定端称为栈底。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://opppmarc.github.io/2020/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://opppmarc.github.io/2020/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-06-16T14:42:12.000Z</published>
    <updated>2020-06-16T14:45:52.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Regex类&quot;&gt;&lt;a href=&quot;#Regex类&quot; class=&quot;headerlink&quot; title=&quot;Regex类&quot;&gt;&lt;/a&gt;Regex类&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.text.regularexpressions.regex?view=netcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Regex类&lt;/a&gt;表示&lt;code&gt;.NET Framework&lt;/code&gt;的正则表达式引擎（类库），它可用于快速分析大量文本以找到特定的字符模式;提取、编辑、替换或删除文本子字符串;和将提取的字符串添加到集合以生成报告。&lt;br&gt;简单的说，Regex是从字符窗中查找匹配字符串的应用类。通过Regex，编程人员能够非常方便的从一段数据中提取自己所需要的数据信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>最大子序和</title>
    <link href="https://opppmarc.github.io/2020/06/16/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>https://opppmarc.github.io/2020/06/16/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</id>
    <published>2020-06-16T03:23:20.000Z</published>
    <updated>2020-06-16T03:27:18.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例：
输入[-2,1,-3,4,-1,2,1,-5,4]&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组重复项</title>
    <link href="https://opppmarc.github.io/2020/06/14/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://opppmarc.github.io/2020/06/14/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2020-06-13T16:13:14.000Z</published>
    <updated>2020-06-13T16:17:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode数据结构练习，通过双指针法来删除排序数组中的重复项。&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode URL&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder</title>
    <link href="https://opppmarc.github.io/2020/06/13/StringBuilder/"/>
    <id>https://opppmarc.github.io/2020/06/13/StringBuilder/</id>
    <published>2020-06-13T12:33:38.000Z</published>
    <updated>2020-06-13T16:22:16.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StringBuilder类&quot;&gt;&lt;a href=&quot;#StringBuilder类&quot; class=&quot;headerlink&quot; title=&quot;StringBuilder类&quot;&gt;&lt;/a&gt;StringBuilder类&lt;/h2&gt;&lt;p&gt;StringBuilder类表示可变字符字符串。&lt;br&gt;下面的示例演示如何调用由 StringBuilder 类定义的多个方法：  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>String Method</title>
    <link href="https://opppmarc.github.io/2020/06/13/StringMethod/"/>
    <id>https://opppmarc.github.io/2020/06/13/StringMethod/</id>
    <published>2020-06-13T12:31:02.000Z</published>
    <updated>2020-06-13T16:22:22.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串的一些常用方法&quot;&gt;&lt;a href=&quot;#字符串的一些常用方法&quot; class=&quot;headerlink&quot; title=&quot;字符串的一些常用方法&quot;&gt;&lt;/a&gt;字符串的一些常用方法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Reverse-integer</title>
    <link href="https://opppmarc.github.io/2020/06/12/Reverse-integer/"/>
    <id>https://opppmarc.github.io/2020/06/12/Reverse-integer/</id>
    <published>2020-06-11T17:08:52.000Z</published>
    <updated>2020-06-12T06:52:28.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;昨天在LeetCode上刷到了一个算法题，在看官方的参考思路时有个点给我卡了一下，在这之前对&lt;code&gt;整数溢出&lt;/code&gt;的判断完全没有概念，在这做一下记录。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://opppmarc.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://opppmarc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Gneric Note</title>
    <link href="https://opppmarc.github.io/2020/06/09/Gneric-Note/"/>
    <id>https://opppmarc.github.io/2020/06/09/Gneric-Note/</id>
    <published>2020-06-09T07:27:07.000Z</published>
    <updated>2020-06-09T08:34:42.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;p&gt;泛型（Generic） 允许您延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许您编写一个可以与任何数据类型一起工作的类或方法。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DeadCellEvolve</title>
    <link href="https://opppmarc.github.io/2020/05/29/DeadCellEvolve/"/>
    <id>https://opppmarc.github.io/2020/05/29/DeadCellEvolve/</id>
    <published>2020-05-29T12:10:55.000Z</published>
    <updated>2020-05-29T12:26:14.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;When-We-Made…-Dead-Cells&quot;&gt;&lt;a href=&quot;#When-We-Made…-Dead-Cells&quot; class=&quot;headerlink&quot; title=&quot;When We Made… Dead Cells&quot;&gt;&lt;/a&gt;When We Made… Dead Cells&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇为译文，原文地址:&lt;a href=&quot;https://www.mcvuk.com/development-news/when-we-made-dead-cells/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/29/tuoHq1.jpg&quot; alt=&quot;tuoHq1.jpg&quot;&gt;  &lt;/p&gt;
&lt;p&gt;视频游戏的开发都是关于迭代，一个好的想法会有成百上千的原型和失败的项目。《死亡细胞》也不例外，在成为广受好评的“roguelik-meets-metroidvania”头衔之前，它一开始是作为一款多人塔防游戏发家的。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="译文" scheme="https://opppmarc.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="单机" scheme="https://opppmarc.github.io/tags/%E5%8D%95%E6%9C%BA/"/>
    
      <category term="搬运" scheme="https://opppmarc.github.io/tags/%E6%90%AC%E8%BF%90/"/>
    
      <category term="译文" scheme="https://opppmarc.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>文字截断在blog里不起作用？</title>
    <link href="https://opppmarc.github.io/2020/05/27/TruncationError/"/>
    <id>https://opppmarc.github.io/2020/05/27/TruncationError/</id>
    <published>2020-05-27T09:09:36.000Z</published>
    <updated>2020-06-09T09:40:14.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有次写好一篇笔记想上传到博客，在本地预览时发现“阅读更多”的标签明明在文中添加了，但是在博客中没起作用。后来经过测试发现标签如果写在了代码块后面，实际预览效果就会出错。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/tags/Blog/"/>
    
      <category term="随笔" scheme="https://opppmarc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
