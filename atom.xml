<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿虞在路上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://opppmarc.github.io/"/>
  <updated>2020-06-22T00:13:48.892Z</updated>
  <id>https://opppmarc.github.io/</id>
  
  <author>
    <name>Marc Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程调用带参数方法</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-21T14:57:59.000Z</published>
    <updated>2020-06-22T00:13:48.892Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通过Thread发起线程时怎么调用带参数的方法&quot;&gt;&lt;a href=&quot;#通过Thread发起线程时怎么调用带参数的方法&quot; class=&quot;headerlink&quot; title=&quot;通过Thread发起线程时怎么调用带参数的方法&quot;&gt;&lt;/a&gt;通过Thread发起线程时怎么调用带参数的方法&lt;/h2&gt;&lt;p&gt;在.NET Framework中可以通过2种方法实现线程调用带参数的方法:Thread.Start(object),封装线程的方法和参数&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>线程PlatformNotSupportedException异常</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8BPlatformNotSupportedException%E5%BC%82%E5%B8%B8/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E7%BA%BF%E7%A8%8BPlatformNotSupportedException%E5%BC%82%E5%B8%B8/</id>
    <published>2020-06-21T14:52:54.000Z</published>
    <updated>2020-06-22T00:12:28.776Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;System-PlatformNotSupportedException-”Operation-is-not-supported-on-this-platform”&quot;&gt;&lt;a href=&quot;#System-PlatformNotSupportedException-”Operation-is-not-supported-on-this-platform”&quot; class=&quot;headerlink&quot; title=&quot;System.PlatformNotSupportedException:”Operation is not supported on this platform”&quot;&gt;&lt;/a&gt;System.PlatformNotSupportedException:”Operation is not supported on this platform”&lt;/h2&gt;&lt;p&gt;详细信息：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.PlatformNotSupportedException
HResult=0x80131539
Message=Operation is not supported on this platform.
Source=System.Private.CoreLib
StackTrace:
at System.Func`3.BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, Object object)
at _010_线程.Program.Main(String[] args) in D:\VSProject\CSharpStudy\Level3\CSStudy3\010-线程\Program.cs:line 13&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/categories/C/Bug/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="Bug" scheme="https://opppmarc.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>语言继承查询(LINQ)</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E8%AF%AD%E8%A8%80%E7%BB%A7%E6%89%BF%E6%9F%A5%E8%AF%A2-LINQ/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E8%AF%AD%E8%A8%80%E7%BB%A7%E6%89%BF%E6%9F%A5%E8%AF%A2-LINQ/</id>
    <published>2020-06-21T14:49:24.000Z</published>
    <updated>2020-06-22T00:17:59.388Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语言继承查询-LINQ&quot;&gt;&lt;a href=&quot;#语言继承查询-LINQ&quot; class=&quot;headerlink&quot; title=&quot;语言继承查询 (LINQ)&quot;&gt;&lt;/a&gt;语言继承查询 (LINQ)&lt;/h2&gt;&lt;p&gt;语言集成查询 (LINQ) 是一系列直接将查询功能集成到 C# 语言的技术统称，是.&lt;code&gt;NET Frameorek 3.5&lt;/code&gt; 的新增特性。&lt;br&gt;借助LINQ，可以使用语言关键字和熟悉的运算符针对强类型化对象集合编写查询，通俗一点说就是是指将查询功能和语言结合起来，从而为我们提供一种统一的方式，让我们能在C#或VB.NET语言中直接查询和操作各种数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>栈(Stack)</title>
    <link href="https://opppmarc.github.io/2020/06/21/%E6%A0%88-Stack/"/>
    <id>https://opppmarc.github.io/2020/06/21/%E6%A0%88-Stack/</id>
    <published>2020-06-21T14:44:58.000Z</published>
    <updated>2020-06-22T00:21:15.895Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈（Stack）&quot;&gt;&lt;a href=&quot;#栈（Stack）&quot; class=&quot;headerlink&quot; title=&quot;栈（Stack）&quot;&gt;&lt;/a&gt;栈（Stack）&lt;/h2&gt;&lt;p&gt;栈(stack)又叫堆栈，是一种只能在表的一端进行插入和删除操作的线性表。允许进行插入、删除操作的这一端称为栈顶（Top），另一个固定端称为栈底。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://opppmarc.github.io/2020/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://opppmarc.github.io/2020/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-06-16T14:42:12.000Z</published>
    <updated>2020-06-16T14:45:50.343Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Regex类&quot;&gt;&lt;a href=&quot;#Regex类&quot; class=&quot;headerlink&quot; title=&quot;Regex类&quot;&gt;&lt;/a&gt;Regex类&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.text.regularexpressions.regex?view=netcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Regex类&lt;/a&gt;表示&lt;code&gt;.NET Framework&lt;/code&gt;的正则表达式引擎（类库），它可用于快速分析大量文本以找到特定的字符模式;提取、编辑、替换或删除文本子字符串;和将提取的字符串添加到集合以生成报告。&lt;br&gt;简单的说，Regex是从字符窗中查找匹配字符串的应用类。通过Regex，编程人员能够非常方便的从一段数据中提取自己所需要的数据信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>最大子序和</title>
    <link href="https://opppmarc.github.io/2020/06/16/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>https://opppmarc.github.io/2020/06/16/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</id>
    <published>2020-06-16T03:23:20.000Z</published>
    <updated>2020-06-16T03:27:17.994Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例：
输入[-2,1,-3,4,-1,2,1,-5,4]&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组重复项</title>
    <link href="https://opppmarc.github.io/2020/06/14/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://opppmarc.github.io/2020/06/14/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2020-06-13T16:13:14.000Z</published>
    <updated>2020-06-13T16:17:46.244Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode数据结构练习，通过双指针法来删除排序数组中的重复项。&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode URL&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://opppmarc.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
      <category term="数据结构" scheme="https://opppmarc.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder</title>
    <link href="https://opppmarc.github.io/2020/06/13/StringBuilder/"/>
    <id>https://opppmarc.github.io/2020/06/13/StringBuilder/</id>
    <published>2020-06-13T12:33:38.000Z</published>
    <updated>2020-06-13T16:22:14.245Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StringBuilder类&quot;&gt;&lt;a href=&quot;#StringBuilder类&quot; class=&quot;headerlink&quot; title=&quot;StringBuilder类&quot;&gt;&lt;/a&gt;StringBuilder类&lt;/h2&gt;&lt;p&gt;StringBuilder类表示可变字符字符串。&lt;br&gt;下面的示例演示如何调用由 StringBuilder 类定义的多个方法：  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>String Method</title>
    <link href="https://opppmarc.github.io/2020/06/13/StringMethod/"/>
    <id>https://opppmarc.github.io/2020/06/13/StringMethod/</id>
    <published>2020-06-13T12:31:02.000Z</published>
    <updated>2020-06-13T16:22:20.682Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串的一些常用方法&quot;&gt;&lt;a href=&quot;#字符串的一些常用方法&quot; class=&quot;headerlink&quot; title=&quot;字符串的一些常用方法&quot;&gt;&lt;/a&gt;字符串的一些常用方法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Reverse-integer</title>
    <link href="https://opppmarc.github.io/2020/06/12/Reverse-integer/"/>
    <id>https://opppmarc.github.io/2020/06/12/Reverse-integer/</id>
    <published>2020-06-11T17:08:52.000Z</published>
    <updated>2020-06-12T06:52:26.005Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;昨天在LeetCode上刷到了一个算法题，在看官方的参考思路时有个点给我卡了一下，在这之前对&lt;code&gt;整数溢出&lt;/code&gt;的判断完全没有概念，在这做一下记录。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://opppmarc.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://opppmarc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://opppmarc.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Gneric Note</title>
    <link href="https://opppmarc.github.io/2020/06/09/Gneric-Note/"/>
    <id>https://opppmarc.github.io/2020/06/09/Gneric-Note/</id>
    <published>2020-06-09T07:27:07.000Z</published>
    <updated>2020-06-09T08:34:40.480Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;p&gt;泛型（Generic） 允许您延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许您编写一个可以与任何数据类型一起工作的类或方法。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DeadCellEvolve</title>
    <link href="https://opppmarc.github.io/2020/05/29/DeadCellEvolve/"/>
    <id>https://opppmarc.github.io/2020/05/29/DeadCellEvolve/</id>
    <published>2020-05-29T12:10:55.000Z</published>
    <updated>2020-05-29T12:26:13.427Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;When-We-Made…-Dead-Cells&quot;&gt;&lt;a href=&quot;#When-We-Made…-Dead-Cells&quot; class=&quot;headerlink&quot; title=&quot;When We Made… Dead Cells&quot;&gt;&lt;/a&gt;When We Made… Dead Cells&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇为译文，原文地址:&lt;a href=&quot;https://www.mcvuk.com/development-news/when-we-made-dead-cells/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/29/tuoHq1.jpg&quot; alt=&quot;tuoHq1.jpg&quot;&gt;  &lt;/p&gt;
&lt;p&gt;视频游戏的开发都是关于迭代，一个好的想法会有成百上千的原型和失败的项目。《死亡细胞》也不例外，在成为广受好评的“roguelik-meets-metroidvania”头衔之前，它一开始是作为一款多人塔防游戏发家的。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="译文" scheme="https://opppmarc.github.io/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="单机" scheme="https://opppmarc.github.io/tags/%E5%8D%95%E6%9C%BA/"/>
    
      <category term="搬运" scheme="https://opppmarc.github.io/tags/%E6%90%AC%E8%BF%90/"/>
    
      <category term="译文" scheme="https://opppmarc.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>文字截断在blog里不起作用？</title>
    <link href="https://opppmarc.github.io/2020/05/27/TruncationError/"/>
    <id>https://opppmarc.github.io/2020/05/27/TruncationError/</id>
    <published>2020-05-27T09:09:36.000Z</published>
    <updated>2020-06-09T09:40:13.179Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有次写好一篇笔记想上传到博客，在本地预览时发现“阅读更多”的标签明明在文中添加了，但是在博客中没起作用。后来经过测试发现标签如果写在了代码块后面，实际预览效果就会出错。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/tags/Blog/"/>
    
      <category term="随笔" scheme="https://opppmarc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>面向对象：类定义/构造/属性</title>
    <link href="https://opppmarc.github.io/2020/05/27/Object-oriented/"/>
    <id>https://opppmarc.github.io/2020/05/27/Object-oriented/</id>
    <published>2020-05-27T08:02:03.000Z</published>
    <updated>2020-06-09T09:00:19.856Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的定义&quot;&gt;&lt;a href=&quot;#类的定义&quot; class=&quot;headerlink&quot; title=&quot;类的定义&quot;&gt;&lt;/a&gt;类的定义&lt;/h2&gt;&lt;p&gt;对象是类的实例，构成类的方法和变量是类的成员。&lt;br&gt;定义类的一般形式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;access specifier&amp;gt; class  class_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F; member variables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;data type&amp;gt; variable1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;data type&amp;gt; variable2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;data type&amp;gt; variableN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F; member methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;return type&amp;gt; method1(parameter_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#x2F;&amp;#x2F; method body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;return type&amp;gt; method2(parameter_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#x2F;&amp;#x2F; method body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;access specifier&amp;gt; &amp;lt;return type&amp;gt; methodN(parameter_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#x2F;&amp;#x2F; method body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>无“声”胜有“声”——《Inside》中异于传统的叙事手段</title>
    <link href="https://opppmarc.github.io/2020/05/27/InsideNarrative/"/>
    <id>https://opppmarc.github.io/2020/05/27/InsideNarrative/</id>
    <published>2020-05-27T07:29:50.000Z</published>
    <updated>2020-05-29T14:08:02.950Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/29/tKnxf0.jpg&quot; alt=&quot;tKnxf0.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果说《火情观察员》是2016年独立游戏界燃起的第一把火，那么来自曾经以《Limbo》蜚声业界的独立游戏工作室Playdead的新作《Inside》，毫无疑问就是第二把，只是这把火要烧的更高，影响也显然更为深远。” ——RED  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="游戏测评" scheme="https://opppmarc.github.io/categories/%E6%B8%B8%E6%88%8F%E6%B5%8B%E8%AF%84/"/>
    
    
      <category term="单机" scheme="https://opppmarc.github.io/tags/%E5%8D%95%E6%9C%BA/"/>
    
      <category term="测评" scheme="https://opppmarc.github.io/tags/%E6%B5%8B%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>CSharp中的调试与错误处理</title>
    <link href="https://opppmarc.github.io/2020/05/18/CSharpDebug/"/>
    <id>https://opppmarc.github.io/2020/05/18/CSharpDebug/</id>
    <published>2020-05-18T15:28:12.000Z</published>
    <updated>2020-05-18T15:42:04.255Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正常模式下的调试&quot;&gt;&lt;a href=&quot;#正常模式下的调试&quot; class=&quot;headerlink&quot; title=&quot;正常模式下的调试&quot;&gt;&lt;/a&gt;正常模式下的调试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.在VS中 我们使用&lt;code&gt;Console.Write(或者WriteLine)&lt;/code&gt;方法向控制台输出变量的值，通过查看变量值是否符合预期来调试错误。&lt;/li&gt;
&lt;li&gt;2.在Unity中我们使用&lt;code&gt;Debug.Log(&amp;quot;&amp;quot;) Debug.LogError(&amp;quot;&amp;quot;) Debug.LogWarn9(&amp;quot;&amp;quot;)&lt;/code&gt;，向unity的Console窗口输出信息，帮助我们调试错误。
    
    </summary>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://opppmarc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GithubBlog搭建</title>
    <link href="https://opppmarc.github.io/2020/05/17/BlogBuding/"/>
    <id>https://opppmarc.github.io/2020/05/17/BlogBuding/</id>
    <published>2020-05-17T03:06:49.000Z</published>
    <updated>2020-05-27T09:11:11.044Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;基于开源框架搭建博客，可以直接在&lt;em&gt;github page&lt;/em&gt;上平台上托管自己的博客。Hexo是高效的静态网站生成框架，它基于Node.js，快速、简单且功能强大。通过Hexo，可以直接使用Markdown语法来撰写博客，但在这之前需要做好一些准备工作…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://opppmarc.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>16信管答辩简记</title>
    <link href="https://opppmarc.github.io/2020/05/16/16Reply/"/>
    <id>https://opppmarc.github.io/2020/05/16/16Reply/</id>
    <published>2020-05-16T06:10:32.000Z</published>
    <updated>2020-05-17T11:11:58.600Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;简要听了下16级师兄师姐的线上毕业答辩会议，可以说是水平差异比较大，但于学弟而言一场答辩的旁听也大致让我了解了大概的流程并有吸取到一些经验吧，总得感受就是准备一定要充分，只有充足的准备才能让你的项目真真正正落地，或者让论文研究更加完善。&lt;/p&gt;
    
    </summary>
    
    
      <category term="信息管理与信息系统" scheme="https://opppmarc.github.io/categories/%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="信管" scheme="https://opppmarc.github.io/tags/%E4%BF%A1%E7%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="https://opppmarc.github.io/2020/05/15/HelloWorld/"/>
    <id>https://opppmarc.github.io/2020/05/15/HelloWorld/</id>
    <published>2020-05-15T15:26:29.000Z</published>
    <updated>2020-05-16T06:34:14.137Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起初&quot;&gt;&lt;a href=&quot;#起初&quot; class=&quot;headerlink&quot; title=&quot;起初&quot;&gt;&lt;/a&gt;起初&lt;/h1&gt;&lt;p&gt;第一次接触到博客的时候是在博客园无意间进入了一位大佬的个人博客，乍一看觉得还挺好看，想着“这是一个人能做出来的东西吗？有点酷欸…”，但后来略微浏览了之后，发现这博主一直在持续输出高质量的技术博客，其中不乏各种学习历程和项目经验。想来自己如若能简要搭建一个博客，对个人生活而言、对编程等学习的记录也是挺有意义的，由此我便萌生了自己搭建博客的想法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://opppmarc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
